{"ast":null,"code":"import * as i1 from '@ngrx/store';\nimport { createAction, props, isNgrxMockEnvironment, select, ACTIVE_RUNTIME_CHECKS, createFeatureSelector, createSelector } from '@ngrx/store';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Injectable, Inject, ENVIRONMENT_INITIALIZER, inject, NgModule } from '@angular/core';\nimport * as i2 from '@angular/router';\nimport { NavigationStart, RoutesRecognized, NavigationCancel, NavigationError, NavigationEnd } from '@angular/router';\nimport { withLatestFrom } from 'rxjs/operators';\n/**\n * An action dispatched when a router navigation request is fired.\n */\n\nconst ROUTER_REQUEST = '@ngrx/router-store/request';\nconst routerRequestAction = createAction(ROUTER_REQUEST, props());\n/**\n * An action dispatched when the router navigates.\n */\n\nconst ROUTER_NAVIGATION = '@ngrx/router-store/navigation';\nconst routerNavigationAction = createAction(ROUTER_NAVIGATION, props());\n/**\n * An action dispatched when the router cancels navigation.\n */\n\nconst ROUTER_CANCEL = '@ngrx/router-store/cancel';\nconst routerCancelAction = createAction(ROUTER_CANCEL, props());\n/**\n * An action dispatched when the router errors.\n */\n\nconst ROUTER_ERROR = '@ngrx/router-store/error';\nconst routerErrorAction = createAction(ROUTER_ERROR, props());\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\n\nconst ROUTER_NAVIGATED = '@ngrx/router-store/navigated';\nconst routerNavigatedAction = createAction(ROUTER_NAVIGATED, props());\n\nfunction routerReducer(state, action) {\n  // Allow compilation with strictFunctionTypes - ref: #1344\n  const routerAction = action;\n\n  switch (routerAction.type) {\n    case ROUTER_NAVIGATION:\n    case ROUTER_ERROR:\n    case ROUTER_CANCEL:\n      return {\n        state: routerAction.payload.routerState,\n        navigationId: routerAction.payload.event.id\n      };\n\n    default:\n      return state;\n  }\n}\n\nclass MinimalRouterStateSerializer {\n  serialize(routerState) {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url\n    };\n  }\n\n  serializeRoute(route) {\n    const children = route.children.map(c => this.serializeRoute(c));\n    return {\n      params: route.params,\n      data: route.data,\n      url: route.url,\n      outlet: route.outlet,\n      routeConfig: route.routeConfig ? {\n        path: route.routeConfig.path,\n        pathMatch: route.routeConfig.pathMatch,\n        redirectTo: route.routeConfig.redirectTo,\n        outlet: route.routeConfig.outlet,\n        title: route.routeConfig.title\n      } : null,\n      queryParams: route.queryParams,\n      fragment: route.fragment,\n      firstChild: children[0],\n      children\n    };\n  }\n\n}\n\nvar NavigationActionTiming;\n\n(function (NavigationActionTiming) {\n  NavigationActionTiming[NavigationActionTiming[\"PreActivation\"] = 1] = \"PreActivation\";\n  NavigationActionTiming[NavigationActionTiming[\"PostActivation\"] = 2] = \"PostActivation\";\n})(NavigationActionTiming || (NavigationActionTiming = {}));\n\nconst DEFAULT_ROUTER_FEATURENAME = 'router';\n\nconst _ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Internal Configuration');\n\nconst ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Configuration');\n\nfunction _createRouterConfig(config) {\n  return Object.assign({\n    stateKey: DEFAULT_ROUTER_FEATURENAME,\n    serializer: MinimalRouterStateSerializer,\n    navigationActionTiming: NavigationActionTiming.PreActivation\n  }, config);\n}\n\nclass FullRouterStateSerializer {\n  serialize(routerState) {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url\n    };\n  }\n\n  serializeRoute(route) {\n    const children = route.children.map(c => this.serializeRoute(c));\n    return {\n      params: route.params,\n      paramMap: route.paramMap,\n      data: route.data,\n      url: route.url,\n      outlet: route.outlet,\n      routeConfig: route.routeConfig ? {\n        component: route.routeConfig.component,\n        path: route.routeConfig.path,\n        pathMatch: route.routeConfig.pathMatch,\n        redirectTo: route.routeConfig.redirectTo,\n        outlet: route.routeConfig.outlet,\n        title: route.routeConfig.title\n      } : null,\n      queryParams: route.queryParams,\n      queryParamMap: route.queryParamMap,\n      fragment: route.fragment,\n      component: route.routeConfig ? route.routeConfig.component : undefined,\n      root: undefined,\n      parent: undefined,\n      firstChild: children[0],\n      pathFromRoot: undefined,\n      children\n    };\n  }\n\n}\n\nclass RouterStateSerializer {}\n\nvar RouterTrigger;\n\n(function (RouterTrigger) {\n  RouterTrigger[RouterTrigger[\"NONE\"] = 1] = \"NONE\";\n  RouterTrigger[RouterTrigger[\"ROUTER\"] = 2] = \"ROUTER\";\n  RouterTrigger[RouterTrigger[\"STORE\"] = 3] = \"STORE\";\n})(RouterTrigger || (RouterTrigger = {}));\n/**\n * Shared router initialization logic used alongside both the StoreRouterConnectingModule and the provideRouterStore\n * function\n */\n\n\nclass StoreRouterConnectingService {\n  constructor(store, router, serializer, errorHandler, config, activeRuntimeChecks) {\n    this.store = store;\n    this.router = router;\n    this.serializer = serializer;\n    this.errorHandler = errorHandler;\n    this.config = config;\n    this.activeRuntimeChecks = activeRuntimeChecks;\n    this.lastEvent = null;\n    this.routerState = null;\n    this.trigger = RouterTrigger.NONE;\n    this.stateKey = this.config.stateKey;\n\n    if (!isNgrxMockEnvironment() && isDevMode() && ((activeRuntimeChecks === null || activeRuntimeChecks === void 0 ? void 0 : activeRuntimeChecks.strictActionSerializability) || (activeRuntimeChecks === null || activeRuntimeChecks === void 0 ? void 0 : activeRuntimeChecks.strictStateSerializability)) && this.serializer instanceof FullRouterStateSerializer) {\n      console.warn('@ngrx/router-store: The serializability runtime checks cannot be enabled ' + 'with the FullRouterStateSerializer. The FullRouterStateSerializer ' + 'has an unserializable router state and actions that are not serializable. ' + 'To use the serializability runtime checks either use ' + 'the MinimalRouterStateSerializer or implement a custom router state serializer.');\n    }\n\n    this.setUpStoreStateListener();\n    this.setUpRouterEventsListener();\n  }\n\n  setUpStoreStateListener() {\n    this.store.pipe(select(this.stateKey), withLatestFrom(this.store)).subscribe(([routerStoreState, storeState]) => {\n      this.navigateIfNeeded(routerStoreState, storeState);\n    });\n  }\n\n  navigateIfNeeded(routerStoreState, storeState) {\n    if (!routerStoreState || !routerStoreState.state) {\n      return;\n    }\n\n    if (this.trigger === RouterTrigger.ROUTER) {\n      return;\n    }\n\n    if (this.lastEvent instanceof NavigationStart) {\n      return;\n    }\n\n    const url = routerStoreState.state.url;\n\n    if (!isSameUrl(this.router.url, url)) {\n      this.storeState = storeState;\n      this.trigger = RouterTrigger.STORE;\n      this.router.navigateByUrl(url).catch(error => {\n        this.errorHandler.handleError(error);\n      });\n    }\n  }\n\n  setUpRouterEventsListener() {\n    const dispatchNavLate = this.config.navigationActionTiming === NavigationActionTiming.PostActivation;\n    let routesRecognized;\n    this.router.events.pipe(withLatestFrom(this.store)).subscribe(([event, storeState]) => {\n      this.lastEvent = event;\n\n      if (event instanceof NavigationStart) {\n        this.routerState = this.serializer.serialize(this.router.routerState.snapshot);\n\n        if (this.trigger !== RouterTrigger.STORE) {\n          this.storeState = storeState;\n          this.dispatchRouterRequest(event);\n        }\n      } else if (event instanceof RoutesRecognized) {\n        routesRecognized = event;\n\n        if (!dispatchNavLate && this.trigger !== RouterTrigger.STORE) {\n          this.dispatchRouterNavigation(event);\n        }\n      } else if (event instanceof NavigationCancel) {\n        this.dispatchRouterCancel(event);\n        this.reset();\n      } else if (event instanceof NavigationError) {\n        this.dispatchRouterError(event);\n        this.reset();\n      } else if (event instanceof NavigationEnd) {\n        if (this.trigger !== RouterTrigger.STORE) {\n          if (dispatchNavLate) {\n            this.dispatchRouterNavigation(routesRecognized);\n          }\n\n          this.dispatchRouterNavigated(event);\n        }\n\n        this.reset();\n      }\n    });\n  }\n\n  dispatchRouterRequest(event) {\n    this.dispatchRouterAction(ROUTER_REQUEST, {\n      event\n    });\n  }\n\n  dispatchRouterNavigation(lastRoutesRecognized) {\n    const nextRouterState = this.serializer.serialize(lastRoutesRecognized.state);\n    this.dispatchRouterAction(ROUTER_NAVIGATION, {\n      routerState: nextRouterState,\n      event: new RoutesRecognized(lastRoutesRecognized.id, lastRoutesRecognized.url, lastRoutesRecognized.urlAfterRedirects, nextRouterState)\n    });\n  }\n\n  dispatchRouterCancel(event) {\n    this.dispatchRouterAction(ROUTER_CANCEL, {\n      storeState: this.storeState,\n      event\n    });\n  }\n\n  dispatchRouterError(event) {\n    this.dispatchRouterAction(ROUTER_ERROR, {\n      storeState: this.storeState,\n      event: new NavigationError(event.id, event.url, `${event}`)\n    });\n  }\n\n  dispatchRouterNavigated(event) {\n    const routerState = this.serializer.serialize(this.router.routerState.snapshot);\n    this.dispatchRouterAction(ROUTER_NAVIGATED, {\n      event,\n      routerState\n    });\n  }\n\n  dispatchRouterAction(type, payload) {\n    this.trigger = RouterTrigger.ROUTER;\n\n    try {\n      this.store.dispatch({\n        type,\n        payload: Object.assign(Object.assign({\n          routerState: this.routerState\n        }, payload), {\n          event: this.config.routerState === 0\n          /* Full */\n          ? payload.event : {\n            id: payload.event.id,\n            url: payload.event.url,\n            // safe, as it will just be `undefined` for non-NavigationEnd router events\n            urlAfterRedirects: payload.event.urlAfterRedirects\n          }\n        })\n      });\n    } finally {\n      this.trigger = RouterTrigger.NONE;\n    }\n  }\n\n  reset() {\n    this.trigger = RouterTrigger.NONE;\n    this.storeState = null;\n    this.routerState = null;\n  }\n\n}\n/** @nocollapse */\n\n\nStoreRouterConnectingService.ɵfac = function StoreRouterConnectingService_Factory(t) {\n  return new (t || StoreRouterConnectingService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router), i0.ɵɵinject(RouterStateSerializer), i0.ɵɵinject(i0.ErrorHandler), i0.ɵɵinject(ROUTER_CONFIG), i0.ɵɵinject(ACTIVE_RUNTIME_CHECKS));\n};\n/** @nocollapse */\n\n\nStoreRouterConnectingService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StoreRouterConnectingService,\n  factory: StoreRouterConnectingService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreRouterConnectingService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.Store\n    }, {\n      type: i2.Router\n    }, {\n      type: RouterStateSerializer\n    }, {\n      type: i0.ErrorHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [ROUTER_CONFIG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [ACTIVE_RUNTIME_CHECKS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Check if the URLs are matching. Accounts for the possibility of trailing \"/\" in url.\n */\n\n\nfunction isSameUrl(first, second) {\n  return stripTrailingSlash(first) === stripTrailingSlash(second);\n}\n\nfunction stripTrailingSlash(text) {\n  if ((text === null || text === void 0 ? void 0 : text.length) > 0 && text[text.length - 1] === '/') {\n    return text.substring(0, text.length - 1);\n  }\n\n  return text;\n}\n/**\n * Connects the Angular Router to the Store.\n *\n * @usageNotes\n *\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideRouterStore()],\n * });\n * ```\n */\n\n\nfunction provideRouterStore(config = {}) {\n  return {\n    ɵproviders: [{\n      provide: _ROUTER_CONFIG,\n      useValue: config\n    }, {\n      provide: ROUTER_CONFIG,\n      useFactory: _createRouterConfig,\n      deps: [_ROUTER_CONFIG]\n    }, {\n      provide: RouterStateSerializer,\n      useClass: config.serializer ? config.serializer : config.routerState === 0\n      /* Full */\n      ? FullRouterStateSerializer : MinimalRouterStateSerializer\n    }, {\n      provide: ENVIRONMENT_INITIALIZER,\n      multi: true,\n\n      useFactory() {\n        return () => inject(StoreRouterConnectingService);\n      }\n\n    }, StoreRouterConnectingService]\n  };\n}\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule.forRoot()\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\n\n\nclass StoreRouterConnectingModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: StoreRouterConnectingModule,\n      providers: [...provideRouterStore(config).ɵproviders]\n    };\n  }\n\n}\n/** @nocollapse */\n\n\nStoreRouterConnectingModule.ɵfac = function StoreRouterConnectingModule_Factory(t) {\n  return new (t || StoreRouterConnectingModule)();\n};\n/** @nocollapse */\n\n\nStoreRouterConnectingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: StoreRouterConnectingModule\n});\n/** @nocollapse */\n\nStoreRouterConnectingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreRouterConnectingModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\n\nfunction createRouterSelector() {\n  return createFeatureSelector(DEFAULT_ROUTER_FEATURENAME);\n}\n\nfunction getSelectors(selectState = createRouterSelector()) {\n  const selectRouterState = createSelector(selectState, router => router && router.state);\n  const selectRootRoute = createSelector(selectRouterState, routerState => routerState && routerState.root);\n  const selectCurrentRoute = createSelector(selectRootRoute, rootRoute => {\n    if (!rootRoute) {\n      return undefined;\n    }\n\n    let route = rootRoute;\n\n    while (route.firstChild) {\n      route = route.firstChild;\n    }\n\n    return route;\n  });\n  const selectFragment = createSelector(selectRootRoute, route => route && route.fragment);\n  const selectQueryParams = createSelector(selectRootRoute, route => route && route.queryParams);\n\n  const selectQueryParam = param => createSelector(selectQueryParams, params => params && params[param]);\n\n  const selectRouteParams = createSelector(selectCurrentRoute, route => route && route.params);\n\n  const selectRouteParam = param => createSelector(selectRouteParams, params => params && params[param]);\n\n  const selectRouteData = createSelector(selectCurrentRoute, route => route && route.data);\n  const selectUrl = createSelector(selectRouterState, routerState => routerState && routerState.url);\n  const selectTitle = createSelector(selectCurrentRoute, route => {\n    var _a;\n\n    return route && ((_a = route.routeConfig) === null || _a === void 0 ? void 0 : _a.title);\n  });\n  return {\n    selectCurrentRoute,\n    selectFragment,\n    selectQueryParams,\n    selectQueryParam,\n    selectRouteParams,\n    selectRouteParam,\n    selectRouteData,\n    selectUrl,\n    selectTitle\n  };\n}\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DEFAULT_ROUTER_FEATURENAME, FullRouterStateSerializer, MinimalRouterStateSerializer, NavigationActionTiming, ROUTER_CANCEL, ROUTER_CONFIG, ROUTER_ERROR, ROUTER_NAVIGATED, ROUTER_NAVIGATION, ROUTER_REQUEST, RouterStateSerializer, StoreRouterConnectingModule, createRouterSelector, getSelectors, provideRouterStore, routerCancelAction, routerErrorAction, routerNavigatedAction, routerNavigationAction, routerReducer, routerRequestAction };","map":{"version":3,"names":["i1","createAction","props","isNgrxMockEnvironment","select","ACTIVE_RUNTIME_CHECKS","createFeatureSelector","createSelector","i0","InjectionToken","isDevMode","Injectable","Inject","ENVIRONMENT_INITIALIZER","inject","NgModule","i2","NavigationStart","RoutesRecognized","NavigationCancel","NavigationError","NavigationEnd","withLatestFrom","ROUTER_REQUEST","routerRequestAction","ROUTER_NAVIGATION","routerNavigationAction","ROUTER_CANCEL","routerCancelAction","ROUTER_ERROR","routerErrorAction","ROUTER_NAVIGATED","routerNavigatedAction","routerReducer","state","action","routerAction","type","payload","routerState","navigationId","event","id","MinimalRouterStateSerializer","serialize","root","serializeRoute","url","route","children","map","c","params","data","outlet","routeConfig","path","pathMatch","redirectTo","title","queryParams","fragment","firstChild","NavigationActionTiming","DEFAULT_ROUTER_FEATURENAME","_ROUTER_CONFIG","ROUTER_CONFIG","_createRouterConfig","config","Object","assign","stateKey","serializer","navigationActionTiming","PreActivation","FullRouterStateSerializer","paramMap","component","queryParamMap","undefined","parent","pathFromRoot","RouterStateSerializer","RouterTrigger","StoreRouterConnectingService","constructor","store","router","errorHandler","activeRuntimeChecks","lastEvent","trigger","NONE","strictActionSerializability","strictStateSerializability","console","warn","setUpStoreStateListener","setUpRouterEventsListener","pipe","subscribe","routerStoreState","storeState","navigateIfNeeded","ROUTER","isSameUrl","STORE","navigateByUrl","catch","error","handleError","dispatchNavLate","PostActivation","routesRecognized","events","snapshot","dispatchRouterRequest","dispatchRouterNavigation","dispatchRouterCancel","reset","dispatchRouterError","dispatchRouterNavigated","dispatchRouterAction","lastRoutesRecognized","nextRouterState","urlAfterRedirects","dispatch","ɵfac","Store","Router","ErrorHandler","ɵprov","decorators","args","first","second","stripTrailingSlash","text","length","substring","provideRouterStore","ɵproviders","provide","useValue","useFactory","deps","useClass","multi","StoreRouterConnectingModule","forRoot","ngModule","providers","ɵmod","ɵinj","createRouterSelector","getSelectors","selectState","selectRouterState","selectRootRoute","selectCurrentRoute","rootRoute","selectFragment","selectQueryParams","selectQueryParam","param","selectRouteParams","selectRouteParam","selectRouteData","selectUrl","selectTitle","_a"],"sources":["C:/Privat/Coding/Angular - The Complete Guide 2022/angular-complete-guide-2022/node_modules/@ngrx/router-store/fesm2015/ngrx-router-store.mjs"],"sourcesContent":["import * as i1 from '@ngrx/store';\nimport { createAction, props, isNgrxMockEnvironment, select, ACTIVE_RUNTIME_CHECKS, createFeatureSelector, createSelector } from '@ngrx/store';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Injectable, Inject, ENVIRONMENT_INITIALIZER, inject, NgModule } from '@angular/core';\nimport * as i2 from '@angular/router';\nimport { NavigationStart, RoutesRecognized, NavigationCancel, NavigationError, NavigationEnd } from '@angular/router';\nimport { withLatestFrom } from 'rxjs/operators';\n\n/**\n * An action dispatched when a router navigation request is fired.\n */\nconst ROUTER_REQUEST = '@ngrx/router-store/request';\nconst routerRequestAction = createAction(ROUTER_REQUEST, props());\n/**\n * An action dispatched when the router navigates.\n */\nconst ROUTER_NAVIGATION = '@ngrx/router-store/navigation';\nconst routerNavigationAction = createAction(ROUTER_NAVIGATION, props());\n/**\n * An action dispatched when the router cancels navigation.\n */\nconst ROUTER_CANCEL = '@ngrx/router-store/cancel';\nconst routerCancelAction = createAction(ROUTER_CANCEL, props());\n/**\n * An action dispatched when the router errors.\n */\nconst ROUTER_ERROR = '@ngrx/router-store/error';\nconst routerErrorAction = createAction(ROUTER_ERROR, props());\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\nconst ROUTER_NAVIGATED = '@ngrx/router-store/navigated';\nconst routerNavigatedAction = createAction(ROUTER_NAVIGATED, props());\n\nfunction routerReducer(state, action) {\n    // Allow compilation with strictFunctionTypes - ref: #1344\n    const routerAction = action;\n    switch (routerAction.type) {\n        case ROUTER_NAVIGATION:\n        case ROUTER_ERROR:\n        case ROUTER_CANCEL:\n            return {\n                state: routerAction.payload.routerState,\n                navigationId: routerAction.payload.event.id,\n            };\n        default:\n            return state;\n    }\n}\n\nclass MinimalRouterStateSerializer {\n    serialize(routerState) {\n        return {\n            root: this.serializeRoute(routerState.root),\n            url: routerState.url,\n        };\n    }\n    serializeRoute(route) {\n        const children = route.children.map((c) => this.serializeRoute(c));\n        return {\n            params: route.params,\n            data: route.data,\n            url: route.url,\n            outlet: route.outlet,\n            routeConfig: route.routeConfig\n                ? {\n                    path: route.routeConfig.path,\n                    pathMatch: route.routeConfig.pathMatch,\n                    redirectTo: route.routeConfig.redirectTo,\n                    outlet: route.routeConfig.outlet,\n                    title: route.routeConfig.title,\n                }\n                : null,\n            queryParams: route.queryParams,\n            fragment: route.fragment,\n            firstChild: children[0],\n            children,\n        };\n    }\n}\n\nvar NavigationActionTiming;\n(function (NavigationActionTiming) {\n    NavigationActionTiming[NavigationActionTiming[\"PreActivation\"] = 1] = \"PreActivation\";\n    NavigationActionTiming[NavigationActionTiming[\"PostActivation\"] = 2] = \"PostActivation\";\n})(NavigationActionTiming || (NavigationActionTiming = {}));\nconst DEFAULT_ROUTER_FEATURENAME = 'router';\nconst _ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Internal Configuration');\nconst ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Configuration');\nfunction _createRouterConfig(config) {\n    return Object.assign({ stateKey: DEFAULT_ROUTER_FEATURENAME, serializer: MinimalRouterStateSerializer, navigationActionTiming: NavigationActionTiming.PreActivation }, config);\n}\n\nclass FullRouterStateSerializer {\n    serialize(routerState) {\n        return {\n            root: this.serializeRoute(routerState.root),\n            url: routerState.url,\n        };\n    }\n    serializeRoute(route) {\n        const children = route.children.map((c) => this.serializeRoute(c));\n        return {\n            params: route.params,\n            paramMap: route.paramMap,\n            data: route.data,\n            url: route.url,\n            outlet: route.outlet,\n            routeConfig: route.routeConfig\n                ? {\n                    component: route.routeConfig.component,\n                    path: route.routeConfig.path,\n                    pathMatch: route.routeConfig.pathMatch,\n                    redirectTo: route.routeConfig.redirectTo,\n                    outlet: route.routeConfig.outlet,\n                    title: route.routeConfig.title,\n                }\n                : null,\n            queryParams: route.queryParams,\n            queryParamMap: route.queryParamMap,\n            fragment: route.fragment,\n            component: (route.routeConfig\n                ? route.routeConfig.component\n                : undefined),\n            root: undefined,\n            parent: undefined,\n            firstChild: children[0],\n            pathFromRoot: undefined,\n            children,\n        };\n    }\n}\n\nclass RouterStateSerializer {\n}\n\nvar RouterTrigger;\n(function (RouterTrigger) {\n    RouterTrigger[RouterTrigger[\"NONE\"] = 1] = \"NONE\";\n    RouterTrigger[RouterTrigger[\"ROUTER\"] = 2] = \"ROUTER\";\n    RouterTrigger[RouterTrigger[\"STORE\"] = 3] = \"STORE\";\n})(RouterTrigger || (RouterTrigger = {}));\n/**\n * Shared router initialization logic used alongside both the StoreRouterConnectingModule and the provideRouterStore\n * function\n */\nclass StoreRouterConnectingService {\n    constructor(store, router, serializer, errorHandler, config, activeRuntimeChecks) {\n        this.store = store;\n        this.router = router;\n        this.serializer = serializer;\n        this.errorHandler = errorHandler;\n        this.config = config;\n        this.activeRuntimeChecks = activeRuntimeChecks;\n        this.lastEvent = null;\n        this.routerState = null;\n        this.trigger = RouterTrigger.NONE;\n        this.stateKey = this.config.stateKey;\n        if (!isNgrxMockEnvironment() &&\n            isDevMode() &&\n            ((activeRuntimeChecks === null || activeRuntimeChecks === void 0 ? void 0 : activeRuntimeChecks.strictActionSerializability) ||\n                (activeRuntimeChecks === null || activeRuntimeChecks === void 0 ? void 0 : activeRuntimeChecks.strictStateSerializability)) &&\n            this.serializer instanceof FullRouterStateSerializer) {\n            console.warn('@ngrx/router-store: The serializability runtime checks cannot be enabled ' +\n                'with the FullRouterStateSerializer. The FullRouterStateSerializer ' +\n                'has an unserializable router state and actions that are not serializable. ' +\n                'To use the serializability runtime checks either use ' +\n                'the MinimalRouterStateSerializer or implement a custom router state serializer.');\n        }\n        this.setUpStoreStateListener();\n        this.setUpRouterEventsListener();\n    }\n    setUpStoreStateListener() {\n        this.store\n            .pipe(select(this.stateKey), withLatestFrom(this.store))\n            .subscribe(([routerStoreState, storeState]) => {\n            this.navigateIfNeeded(routerStoreState, storeState);\n        });\n    }\n    navigateIfNeeded(routerStoreState, storeState) {\n        if (!routerStoreState || !routerStoreState.state) {\n            return;\n        }\n        if (this.trigger === RouterTrigger.ROUTER) {\n            return;\n        }\n        if (this.lastEvent instanceof NavigationStart) {\n            return;\n        }\n        const url = routerStoreState.state.url;\n        if (!isSameUrl(this.router.url, url)) {\n            this.storeState = storeState;\n            this.trigger = RouterTrigger.STORE;\n            this.router.navigateByUrl(url).catch((error) => {\n                this.errorHandler.handleError(error);\n            });\n        }\n    }\n    setUpRouterEventsListener() {\n        const dispatchNavLate = this.config.navigationActionTiming ===\n            NavigationActionTiming.PostActivation;\n        let routesRecognized;\n        this.router.events\n            .pipe(withLatestFrom(this.store))\n            .subscribe(([event, storeState]) => {\n            this.lastEvent = event;\n            if (event instanceof NavigationStart) {\n                this.routerState = this.serializer.serialize(this.router.routerState.snapshot);\n                if (this.trigger !== RouterTrigger.STORE) {\n                    this.storeState = storeState;\n                    this.dispatchRouterRequest(event);\n                }\n            }\n            else if (event instanceof RoutesRecognized) {\n                routesRecognized = event;\n                if (!dispatchNavLate && this.trigger !== RouterTrigger.STORE) {\n                    this.dispatchRouterNavigation(event);\n                }\n            }\n            else if (event instanceof NavigationCancel) {\n                this.dispatchRouterCancel(event);\n                this.reset();\n            }\n            else if (event instanceof NavigationError) {\n                this.dispatchRouterError(event);\n                this.reset();\n            }\n            else if (event instanceof NavigationEnd) {\n                if (this.trigger !== RouterTrigger.STORE) {\n                    if (dispatchNavLate) {\n                        this.dispatchRouterNavigation(routesRecognized);\n                    }\n                    this.dispatchRouterNavigated(event);\n                }\n                this.reset();\n            }\n        });\n    }\n    dispatchRouterRequest(event) {\n        this.dispatchRouterAction(ROUTER_REQUEST, { event });\n    }\n    dispatchRouterNavigation(lastRoutesRecognized) {\n        const nextRouterState = this.serializer.serialize(lastRoutesRecognized.state);\n        this.dispatchRouterAction(ROUTER_NAVIGATION, {\n            routerState: nextRouterState,\n            event: new RoutesRecognized(lastRoutesRecognized.id, lastRoutesRecognized.url, lastRoutesRecognized.urlAfterRedirects, nextRouterState),\n        });\n    }\n    dispatchRouterCancel(event) {\n        this.dispatchRouterAction(ROUTER_CANCEL, {\n            storeState: this.storeState,\n            event,\n        });\n    }\n    dispatchRouterError(event) {\n        this.dispatchRouterAction(ROUTER_ERROR, {\n            storeState: this.storeState,\n            event: new NavigationError(event.id, event.url, `${event}`),\n        });\n    }\n    dispatchRouterNavigated(event) {\n        const routerState = this.serializer.serialize(this.router.routerState.snapshot);\n        this.dispatchRouterAction(ROUTER_NAVIGATED, { event, routerState });\n    }\n    dispatchRouterAction(type, payload) {\n        this.trigger = RouterTrigger.ROUTER;\n        try {\n            this.store.dispatch({\n                type,\n                payload: Object.assign(Object.assign({ routerState: this.routerState }, payload), { event: this.config.routerState === 0 /* Full */\n                        ? payload.event\n                        : {\n                            id: payload.event.id,\n                            url: payload.event.url,\n                            // safe, as it will just be `undefined` for non-NavigationEnd router events\n                            urlAfterRedirects: payload.event\n                                .urlAfterRedirects,\n                        } }),\n            });\n        }\n        finally {\n            this.trigger = RouterTrigger.NONE;\n        }\n    }\n    reset() {\n        this.trigger = RouterTrigger.NONE;\n        this.storeState = null;\n        this.routerState = null;\n    }\n}\n/** @nocollapse */ StoreRouterConnectingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: StoreRouterConnectingService, deps: [{ token: i1.Store }, { token: i2.Router }, { token: RouterStateSerializer }, { token: i0.ErrorHandler }, { token: ROUTER_CONFIG }, { token: ACTIVE_RUNTIME_CHECKS }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ StoreRouterConnectingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: StoreRouterConnectingService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: StoreRouterConnectingService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1.Store }, { type: i2.Router }, { type: RouterStateSerializer }, { type: i0.ErrorHandler }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [ROUTER_CONFIG]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [ACTIVE_RUNTIME_CHECKS]\n                    }] }];\n    } });\n/**\n * Check if the URLs are matching. Accounts for the possibility of trailing \"/\" in url.\n */\nfunction isSameUrl(first, second) {\n    return stripTrailingSlash(first) === stripTrailingSlash(second);\n}\nfunction stripTrailingSlash(text) {\n    if ((text === null || text === void 0 ? void 0 : text.length) > 0 && text[text.length - 1] === '/') {\n        return text.substring(0, text.length - 1);\n    }\n    return text;\n}\n\n/**\n * Connects the Angular Router to the Store.\n *\n * @usageNotes\n *\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideRouterStore()],\n * });\n * ```\n */\nfunction provideRouterStore(config = {}) {\n    return {\n        ɵproviders: [\n            { provide: _ROUTER_CONFIG, useValue: config },\n            {\n                provide: ROUTER_CONFIG,\n                useFactory: _createRouterConfig,\n                deps: [_ROUTER_CONFIG],\n            },\n            {\n                provide: RouterStateSerializer,\n                useClass: config.serializer\n                    ? config.serializer\n                    : config.routerState === 0 /* Full */\n                        ? FullRouterStateSerializer\n                        : MinimalRouterStateSerializer,\n            },\n            {\n                provide: ENVIRONMENT_INITIALIZER,\n                multi: true,\n                useFactory() {\n                    return () => inject(StoreRouterConnectingService);\n                },\n            },\n            StoreRouterConnectingService,\n        ],\n    };\n}\n\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule.forRoot()\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\nclass StoreRouterConnectingModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: StoreRouterConnectingModule,\n            providers: [...provideRouterStore(config).ɵproviders],\n        };\n    }\n}\n/** @nocollapse */ StoreRouterConnectingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: StoreRouterConnectingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ StoreRouterConnectingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: StoreRouterConnectingModule });\n/** @nocollapse */ StoreRouterConnectingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: StoreRouterConnectingModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: StoreRouterConnectingModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\nfunction createRouterSelector() {\n    return createFeatureSelector(DEFAULT_ROUTER_FEATURENAME);\n}\nfunction getSelectors(selectState = createRouterSelector()) {\n    const selectRouterState = createSelector(selectState, (router) => router && router.state);\n    const selectRootRoute = createSelector(selectRouterState, (routerState) => routerState && routerState.root);\n    const selectCurrentRoute = createSelector(selectRootRoute, (rootRoute) => {\n        if (!rootRoute) {\n            return undefined;\n        }\n        let route = rootRoute;\n        while (route.firstChild) {\n            route = route.firstChild;\n        }\n        return route;\n    });\n    const selectFragment = createSelector(selectRootRoute, (route) => route && route.fragment);\n    const selectQueryParams = createSelector(selectRootRoute, (route) => route && route.queryParams);\n    const selectQueryParam = (param) => createSelector(selectQueryParams, (params) => params && params[param]);\n    const selectRouteParams = createSelector(selectCurrentRoute, (route) => route && route.params);\n    const selectRouteParam = (param) => createSelector(selectRouteParams, (params) => params && params[param]);\n    const selectRouteData = createSelector(selectCurrentRoute, (route) => route && route.data);\n    const selectUrl = createSelector(selectRouterState, (routerState) => routerState && routerState.url);\n    const selectTitle = createSelector(selectCurrentRoute, (route) => { var _a; return route && ((_a = route.routeConfig) === null || _a === void 0 ? void 0 : _a.title); });\n    return {\n        selectCurrentRoute,\n        selectFragment,\n        selectQueryParams,\n        selectQueryParam,\n        selectRouteParams,\n        selectRouteParam,\n        selectRouteData,\n        selectUrl,\n        selectTitle,\n    };\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_ROUTER_FEATURENAME, FullRouterStateSerializer, MinimalRouterStateSerializer, NavigationActionTiming, ROUTER_CANCEL, ROUTER_CONFIG, ROUTER_ERROR, ROUTER_NAVIGATED, ROUTER_NAVIGATION, ROUTER_REQUEST, RouterStateSerializer, StoreRouterConnectingModule, createRouterSelector, getSelectors, provideRouterStore, routerCancelAction, routerErrorAction, routerNavigatedAction, routerNavigationAction, routerReducer, routerRequestAction };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}